---

- name: Add docker apt key
  apt_key:
    keyserver: hkp://p80.pool.sks-keyservers.net:80
    id: "58118E89F3A912897C070ADBF76221572C52609D"

- name: Get lsb release name
  shell: >
    lsb_release -c | awk '{print $2}'
  register: lsb_release_codename
  changed_when: false

- name: Add docker apt repo
  apt_repository:
    repo: "deb https://apt.dockerproject.org/repo ubuntu-{{ lsb_release_codename.stdout }} main"
    state: present
    update_cache: yes

- name: Ensure docker is installed
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - docker-engine

- name: Ensure .garden directory exists for the Jenkins environment
  file:
    path: /var/lib/jenkins/.garden
    state: directory
    owner: jenkins
    group: jenkins

- name: Copy .profile content in place for jenkins user
  blockinfile:
    create: yes
    marker: "# {mark} DEFAULT PROFILE BLOCK"
    dest: /var/lib/jenkins/.profile
    insertbefore: BOF
    block: |
      #!/bin/bash

      SSH_ENV="$HOME/.ssh/environment"

      function start_agent {
        echo "Initialising new SSH agent..."
        /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
        echo succeeded
        chmod 600 "${SSH_ENV}"
        . "${SSH_ENV}" > /dev/null
        /usr/bin/ssh-add;
      }

      # Source SSH settings, if applicable
      if [ -f "${SSH_ENV}" ]; then
        . "${SSH_ENV}" > /dev/null
        #ps ${SSH_AGENT_PID} doesn't work under cywgin
        ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
          start_agent;
        }
      else
        start_agent;
      fi

      export GARDEN="{{ garden }}"
      export DOMAIN="{{ domain }}"
      export HOSTED_ZONE_ID="{{ hosted_zone_id }}"
      export GITHUB_ORGANIZATION="{{ github_organization }}"
      export GITHUB_DEPLOYER_USERNAME="{{ github_deployer_username }}"
      export GITHUB_DEPLOYER_PASSWORD="{{ github_deployer_password }}"

      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
    mode: 0644
    owner: jenkins
    group: jenkins

- name: Make sure Jenkins user can run docker commands
  user:
    name: jenkins
    group: jenkins
    groups: docker
    append: yes

- name: Add Jenkins user to sudo group
  user:
    name: jenkins
    groups: sudo
    append: yes
    state: present

- name: Ensure Jenkins user doesn't need a password to sudo
  lineinfile:
    create: yes
    dest: /etc/sudoers
    state: present
    regexp: '^%sudo'
    line: '%sudo ALL=(ALL) NOPASSWD: ALL'
    validate: visudo -cf %s

- name: Ensure jenkins .ssh directory exists
  file:
    path: /var/lib/jenkins/.ssh
    state: directory
    mode: 0700
    owner: jenkins
    group: jenkins

- name: See if bastion_rsa file exists for jenkins
  stat:
    path: /var/lib/jenkins/.ssh/bastion_rsa
  register: jenkins_bastion_rsa

- name: Ensure root bastion_rsa file is available for jenkins as well
  shell: >
    cp /root/.ssh/bastion_rsa /var/lib/jenkins/.ssh/bastion_rsa
  when: not jenkins_bastion_rsa.stat.exists

- name: Ensure correct ownership and perms for the bastion_rsa file
  file:
    path: /var/lib/jenkins/.ssh/bastion_rsa
    state: file
    mode: 0600
    owner: jenkins
    group: jenkins

- name: Ensure the id_rsa content is set to the github deployer ssh key if that value is set
  copy:
    content: "{{ github_deployer_ssh_key_base64 | b64decode }}"
    dest: /var/lib/jenkins/.ssh/id_rsa
    mode: 0600
    owner: jenkins
    group: jenkins

- name: Ensure garden-required jenkins config files/values are in place
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: jenkins
    group: jenkins
    mode: 0644
  with_items:
    - { src: "jenkins.CLI.xml", dest: "/var/lib/jenkins/jenkins.CLI.xml" }
    - { src: "slave-to-master-security-kill-switch", dest: "/var/lib/jenkins/secrets/slave-to-master-security-kill-switch" }

- name: Ensure userContent contents are copied over
  copy:
    src: files/userContent/
    dest: /var/lib/jenkins/userContent/
    directory_mode: yes
    owner: jenkins
    group: jenkins
    mode: 0755

- name: Ensure custom theme configuration is in place
  template:
    src: templates/org.codefirst.SimpleThemeDecorator.xml.j2
    dest: /var/lib/jenkins/org.codefirst.SimpleThemeDecorator.xml
    owner: jenkins
    group: jenkins
  notify: restart jenkins

- name: Ensure the .garden/repos.properties file exists
  lineinfile:
    create: yes
    path: /var/lib/jenkins/.garden/repos-branches.properties
    line: "Repo\tBranch"
    insertbefore: BOF
    owner: jenkins
    group: jenkins

- name: Ensure jobs directories are in place
  file:
    path: "/var/lib/jenkins/jobs/{{ item }}"
    state: directory
    owner: jenkins
    group: jenkins
  with_items: "{{ jenkins_jobs }}"

- name: Ensure job configs are in place
  copy:
    src: "files/jobs/{{ item }}.config.xml"
    dest: "/var/lib/jenkins/jobs/{{ item }}/config.xml"
  with_items: "{{ jenkins_jobs }}"
  notify: restart jenkins

- name: Ensure the scripts directory exists
  file:
    path: /var/lib/jenkins/scripts
    state: directory
    owner: jenkins
    group: jenkins

- name: Ensure all standalone scripts are in place
  copy:
    src: files/scripts/
    dest: /var/lib/jenkins/scripts/
    owner: jenkins
    group: jenkins
    mode: u=rwx,g=rx,u=rx