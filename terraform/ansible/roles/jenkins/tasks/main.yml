---

- include_tasks: install.yml

- name: Ensure Jenkins is started and runs on startup.
  service: name=jenkins state=started enabled=yes

- include_tasks: settings.yml
- include_tasks: users.yml
- include_tasks: plugins.yml

- name: Ensure required python packages are installed
  pip:
    name: "{{ item }}"
    state: present
  with_items:
    - requests

- name: Ensure ruamel.yaml package is installed
  pip:
    name: ruamel.yaml
    state: present

- name: Add docker apt key
  apt_key:
    keyserver: hkp://p80.pool.sks-keyservers.net:80
    id: "58118E89F3A912897C070ADBF76221572C52609D"

- name: Get lsb release name
  shell: >
    lsb_release -c | awk '{print $2}'
  register: lsb_release_codename
  changed_when: false

- name: Add docker apt repo
  apt_repository:
    repo: "deb https://apt.dockerproject.org/repo ubuntu-{{ lsb_release_codename.stdout }} main"
    state: present
    update_cache: yes

- name: Ensure docker is installed
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - docker-engine

- name: Ensure .garden directory exists for the Jenkins environment
  file:
    path: /var/lib/jenkins/.garden
    state: directory
    owner: jenkins
    group: jenkins

- name: Copy .profile content in place for jenkins user
  blockinfile:
    create: yes
    marker: "# {mark} DEFAULT PROFILE BLOCK"
    dest: /var/lib/jenkins/.profile
    insertbefore: BOF
    block: |
      touch ~/.sudo_as_admin_successful

      export JENKINS_HOME=/var/lib/jenkins
      export JENKINS_URL=https://{{ ci_subdomain }}.{{ domain }}

      export GARDEN_NAME="{{ garden }}"
      export GARDEN_DOMAIN="{{ domain }}"
      export GARDEN_AWS_REGION="{{ aws_region }}"
      export GARDEN_HOSTED_ZONE_ID="{{ hosted_zone_id }}"
      export GARDEN_GITHUB_DEPLOYER_USERNAME="{{ github_deployer_username }}"
      export GARDEN_GITHUB_DEPLOYER_TOKEN="{{ github_deployer_token }}"
      export GARDEN_S3_BUCKET_PRIMARY="{{ garden_s3_bucket_primary }}"
      export GARDEN_S3_BUCKET_BACKUPS="{{ garden_s3_bucket_backups }}"
      export GARDEN_S3_ACCESS_KEY_ID="{{ garden_s3_user_access_key_id }}"
      export GARDEN_S3_SECRET_ACCESS_KEY="{{ garden_s3_user_secret_access_key }}"
      export GARDEN_PERSIST_REPOS={{ (garden_persist_repos == True) | ternary('true','false') }}
    mode: 0644
    owner: jenkins
    group: jenkins

- name: Make sure Jenkins user can run docker commands
  user:
    name: jenkins
    group: jenkins
    groups: docker
    append: yes

- name: Add Jenkins user to sudo group
  user:
    name: jenkins
    groups: sudo
    append: yes
    state: present

- name: Ensure Jenkins user doesn't need a password to sudo
  lineinfile:
    create: yes
    dest: /etc/sudoers
    state: present
    regexp: '^%sudo'
    line: '%sudo ALL=(ALL) NOPASSWD: ALL'
    validate: visudo -cf %s

- name: Ensure jenkins .ssh directory exists
  file:
    path: /var/lib/jenkins/.ssh
    state: directory
    mode: 0700
    owner: jenkins
    group: jenkins

- name: Ensure jenkins ssh config file is in place
  copy:
    src: files/ssh-config
    dest: /var/lib/jenkins/.ssh/config
    mode: 0400
    owner: jenkins
    group: jenkins

- name: See if bastion_rsa file exists for jenkins
  stat:
    path: /var/lib/jenkins/.ssh/bastion_rsa
  register: jenkins_bastion_rsa

- name: Ensure root bastion_rsa file is available for jenkins as well
  shell: >
    cp /root/.ssh/bastion_rsa /var/lib/jenkins/.ssh/bastion_rsa
  when: not jenkins_bastion_rsa.stat.exists

- name: Ensure correct ownership and perms for the bastion_rsa file
  file:
    path: /var/lib/jenkins/.ssh/bastion_rsa
    state: file
    mode: 0600
    owner: jenkins
    group: jenkins

- name: Ensure the id_rsa content is set to the github deployer ssh key if that value is set
  copy:
    content: "{{ github_deployer_ssh_key_base64 | b64decode }}"
    dest: /var/lib/jenkins/.ssh/id_rsa
    mode: 0600
    owner: jenkins
    group: jenkins

- name: Add in .gitconfig for jenkins
  template:
    src: templates/.gitconfig.j2
    dest: /var/lib/jenkins/.gitconfig
    mode: 0644
    owner: jenkins
    group: jenkins

- name: Ensure garden-required jenkins config files/values are in place
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: jenkins
    group: jenkins
    mode: 0644
  with_items:
    - { src: "slave-to-master-security-kill-switch", dest: "/var/lib/jenkins/secrets/slave-to-master-security-kill-switch" }
    - { src: "jenkins.CLI.xml", dest: "/var/lib/jenkins/jenkins.CLI.xml" }
  notify: restart jenkins

- name: Ensure userContent contents are copied over
  copy:
    src: files/userContent/
    dest: /var/lib/jenkins/userContent/
    directory_mode: yes
    owner: jenkins
    group: jenkins
    mode: 0755

- name: Ensure custom theme configuration is in place
  template:
    src: templates/org.codefirst.SimpleThemeDecorator.xml.j2
    dest: /var/lib/jenkins/org.codefirst.SimpleThemeDecorator.xml
    owner: jenkins
    group: jenkins
  notify: restart jenkins

- name: Ensure jobs directories are in place
  file:
    path: "/var/lib/jenkins/jobs/{{ item }}"
    state: directory
    owner: jenkins
    group: jenkins
  with_items: "{{ jenkins_jobs }}"

- name: Ensure job configs are in place
  template:
    src: "templates/jobs/{{ item }}.config.xml.j2"
    dest: "/var/lib/jenkins/jobs/{{ item }}/config.xml"
    owner: jenkins
    group: jenkins
  with_items: "{{ jenkins_jobs }}"
  notify: restart jenkins

- name: Ensure the scripts directory exists
  file:
    path: /var/lib/jenkins/scripts
    state: directory
    owner: jenkins
    group: jenkins

- name: Ensure all standalone scripts are in place
  copy:
    src: files/scripts/
    dest: /var/lib/jenkins/scripts/
    directory_mode: yes
    owner: jenkins
    group: jenkins
    mode: u=rwx,g=rx,o=rx

- name: Ensure templated scripts are in place
  template:
    src: templates/scripts/{{ item }}.j2
    dest: "/var/lib/jenkins/scripts/{{ item }}"
    owner: jenkins
    group: jenkins
    mode: u=rwx,g=rx,o=rx
  with_items:
    - get-repos-branches.py

- name: Ensure the .garden/repos-branches.properties file exists
  lineinfile:
    create: yes
    path: /var/lib/jenkins/.garden/repos-branches.properties
    line: "Repo\tBranch"
    insertbefore: BOF
    owner: jenkins
    group: jenkins
  register: repos_branches_properties_file

- name: Run the get-repos-branches script to populate the repos-branches.properties file
  become_user: jenkins
  command: /var/lib/jenkins/scripts/get-repos-branches.py
  when: repos_branches_properties_file.changed

- name: Ensure cached config xml block directory exists
  file:
    path: /var/lib/jenkins/config-blocks.xml
    state: directory
    owner: jenkins
    group: jenkins
  tags: [ jenkins-config ]

- name: Ensure our cached config xml block files are in place
  copy:
    dest: "/var/lib/jenkins/config-blocks.xml/{{ item.tag }}"
    content: "{{ item.xml }}"
  register: config_block_xml_files
  with_items: "{{ jenkins_config_elements }}"
  tags: [ jenkins-config ]

- name: Update jenkins config.xml block(s)
  shell: >
    newxml=$(cat /var/lib/jenkins/config-blocks.xml/{{ item.tag }} | sed ':a;N;$!ba;s/\n//g' | sed 's/  */ /g' | sed 's/> </></g' | sed 's/^ //g' | sed 's/ $//g') && \
    perl -i.last -p0e 's~<{{ item.tag }}(.+)<\/{{ item.tag }}>~'"$newxml"'~s' /var/lib/jenkins/config.xml
  when: config_block_xml_files.changed
  with_items: "{{ jenkins_config_elements }}"
  notify: restart jenkins
  tags: [ jenkins-config ]
