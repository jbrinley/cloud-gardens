---

- name: Add docker apt key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add docker apt repo
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
    state: present

- name: Ensure docker and other required packages are installed
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - docker-ce
    - make

- name: Get the hashed admin user password
  shell: >
    currenthash=$(python -c "import xml.etree.ElementTree as ET; print(ET.parse('/var/lib/jenkins/users/admin/config.xml').find('.//passwordHash').text.replace('#jbcrypt:', ''))") && /usr/local/bin/print-password-hash.py "${currenthash}" "{{ jenkins_admin_password }}"
  register: jenkins_admin_password_bcrypt
  changed_when: false

- name: See if our admin user already exists
  stat:
    path: /var/lib/jenkins/users/{{ jenkins_admin_username }}
  register: admin_user_dir
  changed_when: false

- name: Copy default admin record to our new user record
  command: >
    cp -r /var/lib/jenkins/users/admin /var/lib/jenkins/users/{{ jenkins_admin_username }}
  when: not admin_user_dir.stat.exists
  notify: restart jenkins

- name: Set our admin user password
  lineinfile:
    dest: /var/lib/jenkins/users/{{ jenkins_admin_username }}/config.xml
    regexp: '^\s+<passwordHash>.*<\/passwordHash>'
    line: "      <passwordHash>#jbcrypt:{{ jenkins_admin_password_bcrypt.stdout }}</passwordHash>"
  notify: restart jenkins

- name: Set our new users fullName
  lineinfile:
    dest: /var/lib/jenkins/users/{{ jenkins_admin_username }}/config.xml
    regexp: '^\s+<fullName>.*<\/fullName>$'
    line: "  <fullName>{{ jenkins_admin_username }}</fullName>"
  notify: restart jenkins

- meta: flush_handlers

- name: Make sure Jenkins is running before continuing
  shell: "curl -D - --silent --max-time 5 http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/"
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false

- name: Install Jenkins plugins
  jenkins_plugin:
    name: "{{ item }}"
    state: present
    with_dependencies: yes
    params:
      url_username: "{{ jenkins_admin_username }}"
      url_password: "{{ jenkins_admin_password }}"
      url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}"
  with_items: "{{ jenkins_plugins }}"
  notify: restart jenkins

- name: Copy plugin files for install
  copy:
    src: "files/{{ item }}"
    dest: "/var/lib/jenkins/plugins/{{ item }}"
    owner: jenkins
    group: jenkins
  with_items:
    - "scriptler-2.9.hpi"
    - "uno-choice-1.5.3.hpi"
  notify: restart jenkins

- name: Move warning config file into place
  copy:
    src: files/jenkins.security.UpdateSiteWarningsConfiguration.xml
    dest: /var/lib/jenkins/jenkins.security.UpdateSiteWarningsConfiguration.xml
    owner: jenkins
    group: jenkins
    mode: 0644
  notify: restart jenkins

- name: Ensure .garden directory exists for the Jenkins environment
  file:
    path: /var/lib/jenkins/.garden
    state: directory
    owner: jenkins
    group: jenkins

- name: Ensure jenkins garden bash config file exists with necessary values
  blockinfile:
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK default"
    dest: "/var/lib/jenkins/.garden/config"
    owner: "jenkins"
    group: "jenkins"
    block: |
      garden="{{ garden }}"
      domain="{{ domain }}"
      hosted_zone_id="{{ hosted_zone_id }}"

- name: Copy .profile content in place for jenkins user
  blockinfile:
    create: yes
    marker: "# {mark} DEFAULT PROFILE BLOCK"
    dest: /var/lib/jenkins/.profile
    insertbefore: BOF
    block: |
      #!/bin/bash

      SSH_ENV="$HOME/.ssh/environment"

      function start_agent {
        echo "Initialising new SSH agent..."
        /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
        echo succeeded
        chmod 600 "${SSH_ENV}"
        . "${SSH_ENV}" > /dev/null
        /usr/bin/ssh-add;
      }

      # Source SSH settings, if applicable
      if [ -f "${SSH_ENV}" ]; then
        . "${SSH_ENV}" > /dev/null
        #ps ${SSH_AGENT_PID} doesn't work under cywgin
        ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
          start_agent;
        }
      else
        start_agent;
      fi
    mode: 0644
    owner: jenkins
    group: jenkins

- name: Make sure Jenkins user can run docker commands
  user:
    name: jenkins
    group: jenkins
    groups: docker
    append: yes

- name: Add Jenkins user to sudo group
  user:
    name: jenkins
    groups: sudo
    append: yes
    state: present

- name: Ensure Jenkins user doesn't need a password to sudo
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^%sudo'
    line: '%sudo ALL=(ALL) NOPASSWD: ALL'
    validate: visudo -cf %s

- name: Ensure jenkins .ssh directory exists
  file:
    path: /var/lib/jenkins/.ssh
    state: directory
    mode: 0700
    owner: jenkins
    group: jenkins