---

- name: Ensure aws command line tools are installed
  pip:
    name: awscli
    state: present

- name: Ensure AWS config directories exist
  file:
    path: "{{ item.path }}/.aws"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: 0700
  with_items: "{{ aws_user_paths }}"

- name: Ensure ECS config directories exist
  file:
    path: "{{ item.path }}/.ecs"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: 0700
  with_items: "{{ aws_user_paths }}"

- name: Write profile configs
  blockinfile:
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK default"
    dest: "{{ item.path }}/.aws/config"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: 0600
    block: |
      [default]
      output = json
      region = {{ aws_region }}
  with_items: "{{ aws_user_paths }}"

- name: Write profile credentials
  blockinfile:
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK default"
    dest: "{{ item.path }}/.aws/credentials"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: 0600
    block: |
      [default]
      aws_access_key_id = {{ aws_access_key_id }}
      aws_secret_access_key = {{ aws_secret_access_key }}
  with_items: "{{ aws_user_paths }}"

- name: See if if ecs-cli is installed
  stat:
    path: /usr/local/bin/ecs-cli
  register: ecs_cli_binary
  changed_when: false

- name: Ensure ecs-cli is installed
  command: >
    curl -o /usr/local/bin/ecs-cli https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest
  when: not ecs_cli_binary.stat.exists
  args:
    warn: no

- name: Make sure ecs-cli binary has correct permissions
  file:
    path: /usr/local/bin/ecs-cli
    state: file
    mode: a+x

- name: Write ecs-cli config
  blockinfile:
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK default"
    dest: "{{ item.path }}/.ecs/config"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: 0600
    block: |
      [ecs]
      aws_profile                 = default
      region                      = {{ aws_region }}
      aws_access_key_id           =
      aws_secret_access_key       =
      compose-project-name-prefix =
      compose-service-name-prefix =
      cfn-stack-name-prefix       =
  with_items: "{{ aws_user_paths }}"
