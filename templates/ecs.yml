---
AWSTemplateFormatVersion: '2010-09-09'
Description: Garden ECS
Parameters:
  GardenName:
    Type: String
    Description: Name of the Garden
  KeyName:
    Type: String
    Description: Name of an AWS keypair to use on instances
  InstanceType:
    Type: String
    Description: The EC2 instance type to build
    Default: t2.micro
  IncomingHttpCidr:
    Type: String
    Description: A CIDR range to restrict incoming HTTP to the load balancer
    Default: 0.0.0.0/0
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-cb2305a1
    us-west-1:
      AMIID: ami-bdafdbdd
    us-west-2:
      AMIID: ami-ec75908c
    eu-west-1:
      AMIID: ami-13f84d60
    ap-northeast-1:
      AMIID: ami-e9724c87
    ap-southeast-2:
      AMIID: ami-5f31fd3c
    ap-southeast-1:
      AMIID: ami-83af8ae0
    eu-central-1:
      AMIID: ami-c3253caf
Resources:
  Cluster:
    Type: AWS::ECS::Cluster
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: php-app-service
        Essential: true
        Image: 805898875664.dkr.ecr.us-west-2.amazonaws.com/garden-ecr:php-app
        Memory: 1024
        Cpu: 512
        PortMappings:
        - HostPort: 80
          ContainerPort: 80
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security associated to the load balancer
      VpcId:
        'Fn::ImportValue': !Sub '${GardenName}-vpc-Id'
      SecurityGroupIngress:
      - FromPort: 80
        ToPort: 80
        IpProtocol: tcp
        CidrIp: !Ref 'IncomingHttpCidr'
      Tags:
      - Key: Name
        Value: !Sub '${GardenName}-ecs-loadbalancer-sg'
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Only allow traffic via the load balancer
      SecurityGroupIngress:
      - FromPort: 80
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref 'LoadBalancerSecurityGroup'
        ToPort: 80
      VpcId:
        'Fn::ImportValue': !Sub '${GardenName}-vpc-Id'
      Tags:
      - Key: Name
        Value: !Sub '${GardenName}-ecs-instance-sg'
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: !Sub '${GardenName}-ecs-instance-role'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ecs:DeregisterContainerInstance
            - ecs:DiscoverPollEndpoint
            - ecs:Poll
            - ecs:RegisterContainerInstance
            - ecs:StartTelemetrySession
            - ecs:Submit*
            - ecr:GetAuthorizationToken
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            Resource: '*'
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: !Sub '${GardenName}-ecs-service-role'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:AuthorizeSecurityGroupIngress
            - ec2:Describe*
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            - elasticloadbalancing:Describe*
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            Resource: '*'
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref 'InstanceRole'
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      Subnets:
      - 'Fn::ImportValue': !Sub '${GardenName}-vpc-SubnetAPublic'
      - 'Fn::ImportValue': !Sub '${GardenName}-vpc-SubnetBPublic'
      - 'Fn::ImportValue': !Sub '${GardenName}-vpc-SubnetCPublic'
      Listeners:
      - InstancePort: '80'
        InstanceProtocol: HTTP
        LoadBalancerPort: '80'
        Protocol: HTTP
      SecurityGroups:
      - !Ref 'LoadBalancerSecurityGroup'
      Tags:
      - Key: Name
        Value: !Sub '${GardenName}-ecs-loadbalancer'
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
              command: !Join ['', ['#!/bin/bash

                    ', echo ECS_CLUSTER=, !Ref 'Cluster', ' >> /etc/ecs/ecs.config']]
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join ['', ['[main]

                    ', stack=, !Ref 'AWS::StackId', '

                    ', region=, !Ref 'AWS::Region', '

                    ']]
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join ['', ['[cfn-auto-reloader-hook]

                    ', 'triggers=post.update

                    ', 'path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init

                    ', 'action=/opt/aws/bin/cfn-init -v ', '         --stack ', !Ref 'AWS::StackName',
                  '         --resource LaunchConfiguration ', '         --region ',
                  !Ref 'AWS::Region', '

                    ', 'runas=root

                    ']]
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref 'InstanceProfile'
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeyName'
      SecurityGroups:
      - !Ref 'InstanceSecurityGroup'
      UserData: !Base64
        Fn::Join:
        - ''
        - - '#!/bin/bash -xe

            '
          - 'yum install -y aws-cfn-bootstrap

            '
          - '/opt/aws/bin/cfn-init -v '
          - '         --stack '
          - !Ref 'AWS::StackName'
          - '         --resource LaunchConfiguration '
          - '         --region '
          - !Ref 'AWS::Region'
          - '

            '
          - '/opt/aws/bin/cfn-signal -e $? '
          - '         --stack '
          - !Ref 'AWS::StackName'
          - '         --resource AutoScalingGroup '
          - '         --region '
          - !Ref 'AWS::Region'
          - '

            '
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: '1'
      MaxSize: '1'
      MinSize: '1'
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref 'LaunchConfiguration'
      VPCZoneIdentifier:
      - 'Fn::ImportValue': !Sub '${GardenName}-vpc-SubnetAPublic'
      - 'Fn::ImportValue': !Sub '${GardenName}-vpc-SubnetBPublic'
      - 'Fn::ImportValue': !Sub '${GardenName}-vpc-SubnetCPublic'
      Tags:
      - Key: Name
        Value: !Sub '${GardenName}-ecs'
        PropagateAtLaunch: true
  Service:
    Type: AWS::ECS::Service
    DependsOn:
    - AutoScalingGroup
    Properties:
      Cluster: !Ref 'Cluster'
      DesiredCount: 1
      LoadBalancers:
      - ContainerName: php-app-service
        ContainerPort: '80'
        LoadBalancerName: !Ref 'LoadBalancer'
      Role: !Ref 'ServiceRole'
      TaskDefinition: !Ref 'TaskDefinition'
Outputs:
  AppUrl:
    Value: !Join ['', ['http://', !GetAtt [LoadBalancer, DNSName]]]
